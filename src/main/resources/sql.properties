#Login Queries
sql.login.getLoginDetailsByEmailId = SELECT user_id as userId, email_id as emailId, password, temp_password as tempPassword, un_suc_atmpt as failedLoginAttempts, locked as isLocked FROM login_dtl WHERE email_id = :emailId;
sql.login.lockUserAccount = UPDATE login_dtl SET un_suc_atmpt = un_suc_atmpt + 1, locked = :locked WHERE user_id = :userId;
sql.login.updateFailedAttempts = UPDATE login_dtl SET un_suc_atmpt = un_suc_atmpt + 1 WHERE user_id = :userId;
sql.login.updateLastLogin = UPDATE login_dtl SET last_login = CURRENT_TIMESTAMP, locked = false, un_suc_atmpt = 0 WHERE user_id = :userId;
sql.login.saveTempPassQuery = UPDATE login_dtl SET temp_password = :tempPassword, locked = false, un_suc_atmpt = 0 WHERE user_id = :userId;
#sql.login.saveLoginDetails = 

#User Queries
sql.user.getUserProfDetailsById = SELECT prof.user_id as userId, prof.email_id as emailId, prof.first_name as firstName, prof.last_name as lastName, prof.phn_num as phoneNumber, typ.name as userType FROM user_prof prof, user_type typ WHERE prof.user_id = :userId AND prof.user_type_code = typ.code;
sql.user.isUserExistsByEmail = SELECT COUNT(*) FROM user_prof WHERE email_id = :emailId;
sql.user.getUserIdByEmail = SELECT user_id as userId FROM user_prof WHERE email_id = :emailId;
sql.user.getUserFirstNameById = SELECT first_name FROM user_prof WHERE user_id = :userId;

#Session Queries
sql.session.getSessionDetailsByUserId = SELECT session_id AS sessionId, user_id AS userId, session_time AS sessionStartTime, session_end_time AS sessionEndTime, extend_count AS extendCount FROM session_dtl WHERE user_id = :userId AND (session_time <= CURRENT_TIMESTAMP AND session_end_time >= CURRENT_TIMESTAMP) ORDER BY session_end_time DESC LIMIT 1;
sql.session.saveUserSession = INSERT INTO session_dtl (user_id) VALUES (:userId);
sql.session.isActiveUserSessionExists = SELECT count(*) FROM session_dtl WHERE user_id = :userId AND (session_time <= CURRENT_TIMESTAMP AND session_end_time >= CURRENT_TIMESTAMP);
sql.session.endUserSessionById = UPDATE session_dtl SET session_end_time = CURRENT_TIMESTAMP WHERE session_id = :sessionId;
sql.session.updateUserSessionById = UPDATE session_dtl SET extend_count = extend_count + 1, session_end_time = session_end_time + interval '15 minutes' WHERE session_id = :sessionId;
sql.session.isSessionActive = SELECT count(*) FROM session_dtl WHERE session_id = :sessionId AND (session_time <= CURRENT_TIMESTAMP AND session_end_time >= CURRENT_TIMESTAMP);

