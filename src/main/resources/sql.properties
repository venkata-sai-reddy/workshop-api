#Login Queries
sql.login.getLoginDetailsByEmailId = SELECT user_id as userId, email_id as emailId, password, temp_password as tempPassword, un_suc_atmpt as failedLoginAttempts, locked as isLocked FROM login_dtl WHERE email_id = :emailId;
sql.login.lockUserAccount = UPDATE login_dtl SET un_suc_atmpt = un_suc_atmpt + 1, locked = :locked WHERE user_id = :userId;
sql.login.updateFailedAttempts = UPDATE login_dtl SET un_suc_atmpt = un_suc_atmpt + 1 WHERE user_id = :userId;
sql.login.updateLastLogin = UPDATE login_dtl SET last_login = CURRENT_TIMESTAMP, locked = false, un_suc_atmpt = 0 WHERE user_id = :userId;
sql.login.saveTempPassQuery = UPDATE login_dtl SET temp_password = :tempPassword, locked = false, un_suc_atmpt = 0 WHERE user_id = :userId;
sql.login.saveLoginDetails = INSERT INTO login_dtl (user_id, email_id, password) VALUES ((select user_id FROM user_prof WHERE email_id = :emailId), :emailId, :password);

#User Queries
sql.user.getUserProfDetailsById = SELECT prof.user_id as userId, prof.email_id as emailId, prof.first_name as firstName, prof.last_name as lastName, prof.phn_num as phoneNumber, typ.name as userType FROM user_prof prof, user_type typ WHERE prof.user_id = :userId AND prof.user_type_code = typ.code;
sql.user.isUserExistsByEmail = SELECT COUNT(*) FROM user_prof WHERE email_id = :emailId;
sql.user.getUserIdByEmail = SELECT user_id as userId FROM user_prof WHERE email_id = :emailId;
sql.user.getUserFirstNameById = SELECT first_name FROM user_prof WHERE user_id = :userId;
sql.user.saveUserProfDetails = INSERT INTO user_prof (first_name, last_name, email_id, phn_num, user_type_code) VALUES (:firstName, :lastName, :emailId, :phoneNumber, (select code from user_type where name = :type));
sql.user.saveUserSkillDetailsById = INSERT INTO user_skill_dtl (user_id, skill_id) VALUES (:userId, :skillId);
sql.user.saveUserSkillDetailsByName = INSERT INTO user_skill_dtl (user_id, skill_id) VALUES (:userId, (SELECT DISTINCT skill_id FROM skill_dtl WHERE name = :skillName));
sql.user.getSkilledUsersList = SELECT prof.user_id as userId, prof.email_id as emailId, prof.first_name as firstName, prof.last_name as lastName, typ.name as userType, sd.skill_id as skillId, sd.name as skillName FROM user_prof prof, user_type typ, skill_dtl sd, user_skill_dtl usd WHERE usd.skill_id IN (:skillIds) AND sd.skill_id = usd.skill_id AND usd.user_id = prof.user_id AND prof.user_type_code = typ.code;

#Session Queries
sql.session.getSessionDetailsByUserId = SELECT session_id AS sessionId, user_id AS userId, session_time AS sessionStartTime, session_end_time AS sessionEndTime, extend_count AS extendCount FROM session_dtl WHERE user_id = :userId AND (session_time <= :currentTime AND session_end_time >= :currentTime) ORDER BY session_end_time DESC LIMIT 1;
sql.session.saveUserSession = INSERT INTO session_dtl (user_id, session_time, session_end_time) VALUES (:userId, :currentTime, :currentTime+ interval '15 minutes');
sql.session.isActiveUserSessionExists = SELECT count(*) FROM session_dtl WHERE user_id = :userId AND (session_time <= :currentTime AND session_end_time >= :currentTime);
sql.session.endUserSessionById = UPDATE session_dtl SET session_end_time = :currentTime WHERE session_id = :sessionId;
sql.session.updateUserSessionById = UPDATE session_dtl SET extend_count = extend_count + 1, session_end_time = session_end_time + interval '15 minutes' WHERE session_id = :sessionId;
sql.session.isSessionActive = SELECT count(*) FROM session_dtl WHERE session_id = :sessionId AND (session_time <= :currentTime AND session_end_time >= :currentTime);
sql.session.getSessionDetailsById = SELECT session_id AS sessionId, user_id AS userId, session_time AS sessionStartTime, session_end_time AS sessionEndTime, extend_count AS extendCount FROM session_dtl WHERE session_id = :sessionId AND (session_time <= :currentTime AND session_end_time >= :currentTime) ORDER BY session_end_time DESC LIMIT 1;


#Skills
sql.skills.getAllSkills = SELECT skill.skill_id as skillId, skill.name as skillName, stat.name as status FROM skill_dtl skill, status_dtl stat WHERE skill.status_code = stat.code;
sql.skills.saveUserSkills = INSERT INTO skill_dtl (name, status_code) VALUES (:skillName, (SELECT code FROM status_dtl WHERE name = :status));
sql.skills.getSkillOfWorkshop = SELECT skill.skill_id as skillId, skill.name as skillName, stat.name as status FROM skill_dtl skill, status_dtl stat, workshop_skill_info wsi WHERE wsi.workshop_id = :workshopId AND wsi.skill_id = skill.skill_id AND skill.status_code = stat.code;
sql.skills.getUserSkills = SELECT skill.skill_id as skillId, skill.name as skillName, stat.name as status FROM skill_dtl skill, status_dtl stat, user_skill_dtl usd WHERE usd.user_id = :userId AND usd.skill_id = skill.skill_id AND skill.status_code = stat.code;
sql.skills.getSkillOfWorkshops = SELECT wsi.workshop_id as workshopId, skill.skill_id as skillId, skill.name as skillName, stat.name as status FROM skill_dtl skill, status_dtl stat, workshop_skill_info wsi WHERE wsi.workshop_id = :workshopId AND wsi.skill_id = skill.skill_id AND skill.status_code = stat.code;
sql.skills.getUserRequestedSkills = SELECT skill.skill_id as skillId, skill.name as skillName, wrd.req_user_id as requestedUserId, up.first_name as requestedUser, wrd.req_date as requestedDate FROM skill_dtl skill, workshop_request_dtl wrd, user_prof up WHERE wrd.req_user_id = :userId AND wrd.skill_id = skill.skill_id AND up.user_id = wrd.req_user_id;

#Workshop
sql.workshop.saveWorkshop = INSERT INTO workshop_dtl (name, description, location, capacity, created_user_id, workshop_date, start_time, end_time, created_date) VALUES (:workshopName, :description, (SELECT venue_id FROM venue_dtl WHERE name = :venue), :capacity, :userId, :workshopDate, :startTime, :endTime, CAST(:createdDate AS TIMESTAMP));
sql.workshop.getLatestWorkshopByUserId = SELECT wd.workshop_id as workshopId, wd.name as workshopName, wd.description, vd.name as venue, wd.capacity, wd.created_user_id as createdUserId, wd.created_date as createdDate, wd.workshop_date as workshopDate, wd.start_time as startTime, wd.end_time as endTime FROM workshop_dtl wd, venue_dtl vd WHERE wd.created_user_id = :userId AND vd.venue_id = wd.location ORDER BY wd.created_date DESC LIMIT 1;
sql.workshop.getWorkshopById = SELECT wd.workshop_id as workshopId, wd.name as workshopName, wd.description, vd.name as venue, wd.capacity, wd.created_user_id as createdUserId, wd.created_date as createdDate, wd.workshop_date as workshopDate, wd.start_time as startTime, wd.end_time as endTime, skill.skill_id as skillId, skill.name as skillName, stat.name as status FROM workshop_dtl wd, venue_dtl vd , skill_dtl skill, status_dtl stat, workshop_skill_info wsi WHERE wd.workshop_id = :workshopId AND vd.venue_id = wd.location AND wsi.workshop_id = wd.workshop_id AND wsi.skill_id = skill.skill_id AND skill.status_code = stat.code;
sql.workshop.getAllUserWorkshopsByUserId = SELECT wd.workshop_id as workshopId, wd.name as workshopName, wd.description, vd.name as venue, wd.capacity, wd.created_user_id as createdUserId, wd.created_date as createdDate, wd.workshop_date as workshopDate, wd.start_time as startTime, wd.end_time as endTime, skill.skill_id as skillId, skill.name as skillName, stat.name as status FROM workshop_dtl wd, venue_dtl vd, skill_dtl skill, status_dtl stat, workshop_skill_info wsi WHERE wd.created_user_id = :userId AND vd.venue_id = wd.location AND wsi.workshop_id = wd.workshop_id AND wsi.skill_id = skill.skill_id AND skill.status_code = stat.code;
sql.workshop.getAllEnrolledWorkshops = SELECT wd.workshop_id as workshopId, wd.name as workshopName, wd.description, vd.name as venue, wd.capacity, up.first_name as createdUser, wd.created_date as createdDate, wd.workshop_date as workshopDate, wd.start_time as startTime, wd.end_time as endTime, skill.skill_id as skillId, skill.name as skillName, stat.name as status FROM workshop_dtl wd, venue_dtl vd, user_prof up, skill_dtl skill, status_dtl stat, workshop_skill_info wsi WHERE up.user_id = wd.created_user_id AND vd.venue_id = wd.location AND wsi.workshop_id = wd.workshop_id AND wsi.skill_id = skill.skill_id AND skill.status_code = stat.code AND wd.workshop_id IN ( SELECT workshop_id FROM workshop_register_dtl WHERE reg_user_id = :userId);
sql.workshop.getAllWorkshops = SELECT wd.workshop_id as workshopId, wd.name as workshopName, wd.description, vd.name as venue, wd.capacity, up.user_id as createdUserId, up.first_name as createdUser, wd.created_date as createdDate, wd.workshop_date as workshopDate, wd.start_time as startTime, wd.end_time as endTime, skill.skill_id as skillId, skill.name as skillName, stat.name as status FROM workshop_dtl wd, venue_dtl vd, user_prof up, skill_dtl skill, status_dtl stat, workshop_skill_info wsi WHERE up.user_id = wd.created_user_id AND vd.venue_id = wd.location AND wsi.workshop_id = wd.workshop_id AND wsi.skill_id = skill.skill_id AND skill.status_code = stat.code;
sql.workshop.saveWorkshopSkillsInfo = INSERT INTO workshop_skill_info (workshop_id, skill_id) VALUES(:workshopId, :skillId);
sql.workshop.deleteWorkshopSkillsInfo = DELETE FROM workshop_skill_info WHERE workshop_id = :workshopId AND skill_id = :skillId;
sql.workshop.deleteWorkshopById = DELETE FROM workshop_dtl WHERE workshop_id = :workshopId;
sql.workshop.updateWorkshopDynamicFields = UPDATE workshop_dtl SET 
sql.workshop.getUserWorkshopsByDate = SELECT wd.workshop_id as workshopId, wd.name as workshopName, wd.description, vd.name as venue, wd.capacity, wd.created_user_id as createdUserId, wd.created_date as createdDate, wd.workshop_date as workshopDate, wd.start_time as startTime, wd.end_time as endTime FROM workshop_dtl wd, venue_dtl vd WHERE wd.created_user_id = :userId AND wd.workshop_date = :workshopDate AND vd.venue_id = wd.location;
sql.workshop.getWorkshopsByDate = SELECT wd.workshop_id as workshopId, wd.name as workshopName, wd.description, vd.name as venue, wd.capacity, up.first_name as createdUser, wd.created_date as createdDate, wd.workshop_date as workshopDate, wd.start_time as startTime, wd.end_time as endTime FROM workshop_dtl wd, venue_dtl vd, user_prof up WHERE up.user_id = wd.created_user_id AND wd.workshop_date = :workshopDate AND vd.venue_id = wd.location;
sql.workshop.getWorkshopRegisteredUsers = SELECT up.user_id as userId, up.first_name as firstName, up.last_name as lastName, up.email_id as emailId, ut.name as userType, wrd.reg_date as registeredDate FROM workshop_register_dtl wrd, user_prof up, user_type ut WHERE wrd.workshop_id = :workshopId AND wrd.reg_user_id = up.user_id;
sql.workshop.getAllWorkshopsBySkill = SELECT wd.workshop_id as workshopId, wd.name as workshopName, wd.description, vd.name as venue, wd.capacity, up.first_name as createdUser, wd.created_date as createdDate, wd.workshop_date as workshopDate, wd.start_time as startTime , wd.end_time as endTime FROM workshop_dtl wd, workshop_skill_info wsd, skill_dtl sd, venue_dtl vd, user_prof up WHERE sd.name = :skill AND sd.skill_id = wsd.skill_id AND wsd.workshop_id = wd.workshop_id AND wd.created_user_id = up.user_id AND wd.location = vd.venue_id;
sql.workshop.saveUserEnrollment = INSERT INTO workshop_register_dtl (workshop_id, reg_user_id, reg_date) VALUES (:workshopId, :userId, CAST(:registeredDate AS TIMESTAMP));
sql.workshop.saveUserSkillRequest = INSERT INTO workshop_request_dtl (req_user_id, skill_id, req_date) VALUES (:userId, (SELECT skill_id FROM skill_dtl WHERE name = :skillName), CAST(:requestedDate AS TIMESTAMP));
sql.workshop.getRecentRequestedSkills = SELECT wrd.req_user_id as requestedUserId, wrd.skill_id as skillId, wrd.req_date as requestedDate, up.first_name as requestedUser, skill.name as skillName FROM workshop_request_dtl wrd, skill_dtl skill, user_prof up WHERE wrd.req_user_id = up.user_id AND skill.skill_id = wrd.skill_id AND wrd.req_date BETWEEN NOW() - INTERVAL '240 HOURS' AND NOW();


# Admins
sql.admin.getAllVenues = SELECT venue_id as venueId, name as venueName FROM venue_dtl;

